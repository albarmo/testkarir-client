// [WARNING] This file is generated by running `$ qore codegen` on your root project, please do not edit

/// <reference types="@feedloop/qore-client" />
import { QoreSchema } from "@feedloop/qore-client";

declare module "@feedloop/qore-client" {
  type MemberTableRow = {
    id: string;
    role: { id: string; displayField: string };
    email: string;
    username: string;
    domicile: string;
    password: string;
    birthDate: Date;
    status: boolean;
  };

  type ToDoTableRow = {
    id: string;
    task: string;
    description: string;
    done: boolean;
    points: number;
    deadline: Date;
    difficulty: "Easy" | "Medium" | "Hard";
    role: { id: string; displayField: string };
    attachment: string;
    timeAllocation: string;
  };

  type AuthDataViewRow = {
    read: {
      id: string;
      role: { id: string; displayField: string };
      email: string;
      username: string;
      password: string;
    };
    write: {
      email: string;
      username: string;
      password: string;
    };
    params: {
      email?: string;
      username?: string;
    };
    actions: {};
  };

  type AlltaskViewRow = {
    read: {
      id: string;
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
    };
    write: {
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
    };
    params: {};
    actions: {};
  };

  type AllMembersViewRow = {
    read: {
      id: string;
      role: { id: string; displayField: string };
      email: string;
      username: string;
      domicile: string;
      birthDate: Date;
      password: string;
      status: boolean;
    };
    write: {
      email: string;
      username: string;
      domicile: string;
      birthDate: Date;
      password: string;
      status: boolean;
    };
    params: {};
    actions: {};
  };

  type NewViewTfIViewRow = {
    read: {
      id: string;
      role: { id: string; displayField: string };
      email: string;
      username: string;
      domicile: string;
      password: string;
    };
    write: {
      email: string;
      username: string;
      domicile: string;
      password: string;
    };
    params: {};
    actions: {};
  };

  type DoneViewRow = {
    read: {
      id: string;
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
    };
    write: {
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
    };
    params: {};
    actions: {};
  };

  type ReisTaskViewRow = {
    read: {
      id: string;
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
      difficulty: "Easy" | "Medium" | "Hard";
      role: { id: string; displayField: string };
      attachment: string;
      timeAllocation: string;
    };
    write: {
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
      difficulty: "Easy" | "Medium" | "Hard";
      attachment: string;
    };
    params: {
      timeAllocation?: string;
    };
    actions: {};
  };

  type TestViewRow = {
    read: {
      id: string;
      task: string;
      description: string;
    };
    write: {
      task: string;
      description: string;
    };
    params: {};
    actions: {};
  };

  type ToDoViewRow = {
    read: {
      id: string;
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
    };
    write: {
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
    };
    params: {};
    actions: {};
  };

  type ToDoDefaultViewViewRow = {
    read: {
      id: string;
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
      difficulty: "Easy" | "Medium" | "Hard";
      role: { id: string; displayField: string };
      timeAllocation: string;
      attachment: string;
    };
    write: {
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
      difficulty: "Easy" | "Medium" | "Hard";
      attachment: string;
    };
    params: {
      "$by.points"?: "desc";
    };
    actions: {};
  };

  type UndoneViewRow = {
    read: {
      id: string;
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
      difficulty: "Easy" | "Medium" | "Hard";
      role: { id: string; displayField: string };
      attachment: string;
      timeAllocation: string;
    };
    write: {
      task: string;
      description: string;
      done: boolean;
      points: number;
      deadline: Date;
      difficulty: "Easy" | "Medium" | "Hard";
      attachment: string;
    };
    params: {
      undone?: string;
    };
    actions: {};
  };

  type ProjectSchema = {
    authData: AuthDataViewRow;
    alltask: AlltaskViewRow;
    allMembers: AllMembersViewRow;
    newViewTfI: NewViewTfIViewRow;
    done: DoneViewRow;
    reisTask: ReisTaskViewRow;
    test: TestViewRow;
    toDo: ToDoViewRow;
    toDoDefaultView: ToDoDefaultViewViewRow;
    undone: UndoneViewRow;
  };
}
